<?php
/**
 * UserFrosting (http://www.userfrosting.com)
 *
 * @link      https://github.com/userfrosting/UserFrosting
 * @license   https://github.com/userfrosting/UserFrosting/blob/master/licenses/UserFrosting.md (MIT License)
 */

namespace UserFrosting\Sprinkle\Core\Controller;

use Slim\Exception\NotFoundException as NotFoundException;
use UserFrosting\Support\Exception\ForbiddenException;
use Illuminate\Database\Capsule\Manager as DB;

/**
 * CoreController Class
 *
 * Implements some common sitewide routes.
 * @author Alex Weissman (https://alexanderweissman.com)
 * @see http://www.userfrosting.com/navigating/#structure
 */
class CoreController extends SimpleController
{
    /**
     * Renders the default home page for UserFrosting.
     *
     * By default, this is the page that non-authenticated users will first see when they navigate to your website's root.
     * Request type: GET
     */

    public function pageIndex($request, $response, $args) {
        // AUTHORIZATION - ONLY FOR ADMINS RIGHT KNOW (BUILD PROCESS)
        $authorizer = $this->ci->authorizer;
        $currentUser = $this->ci->currentUser;
        if (!$authorizer->checkAccess($currentUser, 'update_site_config')) {
            //throw new ForbiddenException();
        }

        return $this->ci->view->render($response, 'pages/index.html.twig');
    }


    public function pageTest($request, $response, $args) {
        return $this->ci->view->render($response, 'pages/test.html.twig');
    }

    /**
     * Renders a sample "about" page for UserFrosting.
     *
     * Request type: GET
     */
    public function pageAbout($request, $response, $args) {
        return $this->ci->view->render($response, 'pages/about.html.twig');
    }

    /**
     * Renders terms of service page.
     *
     * Request type: GET
     */
    public function pageLegal($request, $response, $args) {
        return $this->ci->view->render($response, 'pages/legal.html.twig');
    }

    /**
     * Renders privacy page.
     *
     * Request type: GET
     */
    public function pagePrivacy($request, $response, $args) {
        return $this->ci->view->render($response, 'pages/privacy.html.twig');
    }

    /**
     * Render the alert stream as a JSON object.
     *
     * The alert stream contains messages which have been generated by calls to `MessageStream::addMessage` and `MessageStream::addMessageTranslated`.
     * Request type: GET
     */
    public function jsonAlerts($request, $response, $args) {
        return $response->withJson($this->ci->alerts->getAndClearMessages());
    }

    /**
     * Handle all requests for raw assets.
     * Request type: GET
     */
    public function getAsset($request, $response, $args) {
        // By starting this service, we ensure that the timezone gets set.
        $config = $this->ci->config;

        $assetLoader = $this->ci->assetLoader;

        if (!$assetLoader->loadAsset($args['url'])) {
            throw new NotFoundException($request, $response);
        }

        $content = $assetLoader->getContent();

        switch ($assetLoader->getType()) {
            case "text/css":
                if (trim($content) === "") return $content;
                $content = preg_replace(
                    array(
                        // Remove comment(s)
                        '#("(?:[^"\\\]++|\\\.)*+"|\'(?:[^\'\\\\]++|\\\.)*+\')|\/\*(?!\!)(?>.*?\*\/)|^\s*|\s*$#s',
                        // Remove unused white-space(s)
                        '#("(?:[^"\\\]++|\\\.)*+"|\'(?:[^\'\\\\]++|\\\.)*+\'|\/\*(?>.*?\*\/))|\s*+;\s*+(})\s*+|\s*+([*$~^|]?+=|[{};,>~+]|\s*+-(?![0-9\.])|!important\b)\s*+|([[(:])\s++|\s++([])])|\s++(:)\s*+(?!(?>[^{}"\']++|"(?:[^"\\\]++|\\\.)*+"|\'(?:[^\'\\\\]++|\\\.)*+\')*+{)|^\s++|\s++\z|(\s)\s+#si',
                        // Replace `0(cm|em|ex|in|mm|pc|pt|px|vh|vw|%)` with `0`
                        '#(?<=[\s:])(0)(cm|em|ex|in|mm|pc|pt|px|vh|vw|%)#si',
                        // Replace `:0 0 0 0` with `:0`
                        '#:(0\s+0|0\s+0\s+0\s+0)(?=[;\}]|\!important)#i',
                        // Replace `background-position:0` with `background-position:0 0`
                        '#(background-position):0(?=[;\}])#si',
                        // Replace `0.6` with `.6`, but only when preceded by `:`, `,`, `-` or a white-space
                        '#(?<=[\s:,\-])0+\.(\d+)#s',
                        // Minify string value
                        '#(\/\*(?>.*?\*\/))|(?<!content\:)([\'"])([a-z_][a-z0-9\-_]*?)\2(?=[\s\{\}\];,])#si',
                        '#(\/\*(?>.*?\*\/))|(\burl\()([\'"])([^\s]+?)\3(\))#si',
                        // Minify HEX color code
                        '#(?<=[\s:,\-]\#)([a-f0-6]+)\1([a-f0-6]+)\2([a-f0-6]+)\3#i',
                        // Replace `(border|outline):none` with `(border|outline):0`
                        '#(?<=[\{;])(border|outline):none(?=[;\}\!])#',
                        // Remove empty selector(s)
                        '#(\/\*(?>.*?\*\/))|(^|[\{\}])(?:[^\s\{\}]+)\{\}#s'
                    ),
                    array(
                        '$1',
                        '$1$2$3$4$5$6$7',
                        '$1',
                        ':0',
                        '$1:0 0',
                        '.$1',
                        '$1$3',
                        '$1$2$4$5',
                        '$1$2$3',
                        '$1:0',
                        '$1$2'
                    ),
                    $content);
                break;
            case "text/javascript":
                if(trim($content) === "") return $content;
                $content = preg_replace(
                    array(
                        // Remove comment(s)
                        '#\s*("(?:[^"\\\]++|\\\.)*+"|\'(?:[^\'\\\\]++|\\\.)*+\')\s*|\s*\/\*(?!\!|@cc_on)(?>[\s\S]*?\*\/)\s*|\s*(?<![\:\=])\/\/.*(?=[\n\r]|$)|^\s*|\s*$#',
                        // Remove white-space(s) outside the string and regex
                        '#("(?:[^"\\\]++|\\\.)*+"|\'(?:[^\'\\\\]++|\\\.)*+\'|\/\*(?>.*?\*\/)|\/(?!\/)[^\n\r]*?\/(?=[\s.,;]|[gimuy]|$))|\s*([!%&*\(\)\-=+\[\]\{\}|;:,.<>?\/])\s*#s',
                        // Remove the last semicolon
                        '#;+\}#',
                        // Minify object attribute(s) except JSON attribute(s). From `{'foo':'bar'}` to `{foo:'bar'}`
                        '#([\{,])([\'])(\d+|[a-z_][a-z0-9_]*)\2(?=\:)#i',
                        // --ibid. From `foo['bar']` to `foo.bar`
                        '#([a-z0-9_\)\]])\[([\'"])([a-z_][a-z0-9_]*)\2\]#i'
                    ),
                    array(
                        '$1',
                        '$1$2',
                        '}',
                        '$1$3',
                        '$1.$3'
                    ),
                    $content);
        }

        return $response
            ->withHeader('Content-Type', $assetLoader->getType())
            ->withHeader('Content-Length', $assetLoader->getLength())
            ->write($content);
    }
}
