{% autoescape 'js' %}

/************
 GENERATE KEYS
 ************
 if (localStorage.getItem('KeysGenerated') === null || localStorage.getItem('KeysGenerated') !== "true") {
    // GENERATE -- LATER ON LOGIN!
    var EncryptionPhrase = "PASSWORD 123"; // THE USERS PASSWORD -- needs to generate on login!
    var RSABitLength = 1024;
    var PrivateKeyString = cryptico.generateRSAKey(EncryptionPhrase, RSABitLength);
    var PublicKeyString = cryptico.publicKeyString(PrivateKeyString);
    // SAVE TO DATABASE
    $.ajax({
        type: "POST",
        url: "assets/php/SavePublicKey.php",
        data: {
            UserID: "1", // TEMPORARY
            PublicKeyString: PublicKeyString
        },
        async: true,
        error: function () {
            console.error("Error while saving public key to database!");
        },
        success: function () {
            localStorage.setItem('KeysGenerated', "true");
        }
    });
}


 /******
 GENERAL
 ******/
function InitializeChatServer() {
    var ChatTextInput = $("#ChatTextInput");
    var SubscribeTextInput = $("#SubscribeTextInput");
    var ChatMessages = $("#ChatMessages");

    var ChatSocket = new WebSocket('wss://marvinborner.ddnss.de:1337');
    ChatSocket.onerror = function () {
        setTimeout(function () {
            console.log("Connection failed. Trying again...");
            InitializeChatServer();
        }, 5000);
    };
    ChatSocket.onopen = function () {
        console.log("Chat connection established!");
        ChatSocket.onmessage = function (e) {
            var LastMessage = $(".ChatMessage:last");
            var MessageObject = JSON.parse(e.data);
            if (MessageObject.ServerMessage === false) {
                if (MessageObject.WasHimself === true) { // SENT
                    if (!LastMessage.hasClass("MessageSent")) {
                        ChatMessages.append("<div class='ChatMessage MessageSent AloneMessage animated fadeInRight'>" + MessageObject.Message + "</div><br><br>");
                    } else if (LastMessage.hasClass("MessageSent")) {
                        ChatMessages.append("<div class='ChatMessage MessageSent BottomMessage animated fadeInRight'>" + MessageObject.Message + "</div><br><br>");
                        if (LastMessage.hasClass("AloneMessage")) {
                            LastMessage.removeClass("AloneMessage");
                            LastMessage.addClass("TopMessage");
                        } else if (LastMessage.hasClass("BottomMessage")) {
                            LastMessage.removeClass("BottomMessage");
                            LastMessage.addClass("MiddleMessage");
                        }
                    }
                    $('.MessageSent').linkify({
                        target: "_blank"
                    });
                } else if (MessageObject.WasHimself === false) { // RECEIVED
                    if (!LastMessage.hasClass("MessageReceived")) {
                        ChatMessages.append("<div class='ChatMessage MessageReceived AloneMessage animated fadeInLeft'>" + MessageObject.Message + "</div><br><br>");
                    } else if (LastMessage.hasClass("MessageReceived")) {
                        ChatMessages.append("<div class='ChatMessage MessageReceived BottomMessage animated fadeInLeft'>" + MessageObject.Message + "</div><br><br>");
                        if (LastMessage.hasClass("AloneMessage")) {
                            LastMessage.removeClass("AloneMessage");
                            LastMessage.addClass("TopMessage");
                        } else if (LastMessage.hasClass("BottomMessage")) {
                            LastMessage.removeClass("BottomMessage");
                            LastMessage.addClass("MiddleMessage");
                        }
                    }
                    $('.MessageReceived').linkify({
                        target: "_blank"
                    });
                }
            } else if (MessageObject.ServerMessage === true) {
                if (MessageObject.ServerMessageType === "GroupJoin") {
                    if (MessageObject.WasHimself === true) {
                        ChatMessages.empty();
                        var Message = "{{ translate("CHAT_MESSAGES.YOU_GROUP_JOIN", {group: "ConvertTranslatedMessageWithGroupName"}) }}".replace("ConvertTranslatedMessageWithGroupName", '"' + MessageObject.GroupName + '"');
                    } else if (MessageObject.WasHimself === false) {
                        var Message = "{{ translate("CHAT_MESSAGES.USER_GROUP_JOIN", {user: "ConvertTranslatedMessageWithUsername"}) }}".replace("ConvertTranslatedMessageWithUsername", MessageObject.Username);
                    }
                    ChatMessages.append("<div class='ServerChatMessage'>" + Message + "</span>.</div><br><br>");
                } else if (MessageObject.ServerMessageType === "UserDisconnect") {
                    var TranslatedDisconnectMessage = "{{ translate("CHAT_MESSAGES.USER_DISCONNECT", {user: "ConvertTranslatedMessageWithUsername"}) }}".replace("ConvertTranslatedMessageWithUsername", MessageObject.Username);
                    ChatMessages.append("<div class='ServerChatMessage'>" + TranslatedDisconnectMessage + ".</div><br><br>");
                } else if (MessageObject.ServerMessageType === "TypingState") {
                    console.log("received typing");
                    if (MessageObject.State === true) {
                        if (MessageObject.WasHimself === true) {
                            // YOU STARTED TYPING
                        } else if (MessageObject.WasHimself === false) {
                            // OTHER STARTED TYPING
                            console.log("[SERVER REPORT] " + MessageObject.Username + " STOPPED TYPING");
                        }
                    } else if (MessageObject.State === false) {
                        if (MessageObject.WasHimself === true) {
                            // YOU STOPPED TYPING
                        } else if (MessageObject.WasHimself === false) {
                            // OTHER STOPPED TYPING
                            console.log("[SERVER REPORT] " + MessageObject.Username + " STOPPED TYPING");
                        }
                    }
                }
            }
            ChatMessages.animate({scrollTop: document.querySelector("#ChatMessages").scrollHeight}, "slow");
        };

        SubscribeTextInput.keyup(function (e) {
            if (e.keyCode === 13 && SubscribeTextInput.val().length > 0) {
                subscribe(SubscribeTextInput.val());
            }
        });


        var typingTimer;
        var doneTypingInterval = 2500;
        var isTyping = false;

        ChatTextInput.keydown(function () {
            sendStartTyping();
            clearTimeout(typingTimer);
        });

        ChatTextInput.keyup(function (e) {
            // TYPING RECOGNITION
            clearTimeout(typingTimer);
            typingTimer = setTimeout(sendStopTyping, doneTypingInterval);

            // USER PRESSED ENTER
            if (e.keyCode === 13 && ChatTextInput.val().length > 0) {
                sendMessage(ChatTextInput.val());
                ChatTextInput.val("");
            }
        });

        function sendStartTyping() {
            if (isTyping === false) {
                sendTypingState(true);
                isTyping = true;
            }
        }

        function sendStopTyping() {
            if (isTyping === true) {
                sendTypingState(false);
                isTyping = false;
            }
        }

        function subscribe(channel) {
            ChatSocket.send(JSON.stringify({ClientMessageType: "Subscribe", Channel: channel}));
            SubscribeTextInput.hide();
            ChatTextInput.show();
        }

        function sendMessage(msg) {
            ChatSocket.send(JSON.stringify({ClientMessageType: "Message", Message: msg}));
            ChatTextInput.val("");
        }

        function sendTypingState(state) {
            ChatSocket.send(JSON.stringify({ClientMessageType: "TypingState", State: state}));
        }
    };
}

InitializeChatServer();

{% endautoescape %}